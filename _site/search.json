[
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Analysis",
    "section": "",
    "text": "1 Data Preparation and Cleaning\n\n\n/var/folders/8c/3l15xlrn78x5217gdqdbbnc00000gn/T/ipykernel_1902/3367646316.py:1: DtypeWarning:\n\nColumns (19,30) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\ncolumns_to_drop = [\n   \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_2_NAME\", \"SOC_3\", \"SOC_3_NAME\", \"SOC_4\", \"SOC_4_NAME\", \"SOC_5\", \"SOC_5_NAME\", \"SOC_2021_2\", \"SOC_2021_2_NAME\", \"SOC_2021_3\", \"SOC_2021_3_NAME\", \"SOC_2021_5\", \"SOC_2021_5_NAME\",\n    'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME','NAICS_2022_5', 'NAICS_2022_5_NAME', 'SOC_2_NAME', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5_NAME'\n]\ndata_drop = data.drop(columns=columns_to_drop)\n\n\n#Replace salary with median\nsalary_median = data_drop['SALARY'].median()\nsalary_to_median = data_drop['SALARY_TO'].median()\nsalary_from_median = data_drop['SALARY_FROM'].median()\ndata_drop['SALARY'] = data_drop['SALARY'].fillna(salary_median)\ndata_drop['SALARY_TO'] = data_drop['SALARY_TO'].fillna(salary_to_median)\ndata_drop['SALARY_FROM'] = data_drop['SALARY_FROM'].fillna(salary_from_median)\n\n\n#Replace NA Values with 0 and -1\ndata_drop['MIN_YEARS_EXPERIENCE'] = data_drop['MIN_YEARS_EXPERIENCE'].fillna(0)\ndata_drop['DURATION'] = data_drop['DURATION'].fillna(-1)\ndata_drop['MODELED_DURATION'] = data_drop['MODELED_DURATION'].fillna(-1)\n\n\n#Replace Missing Dates with Reasonable Values, and convert to date time format\ndata_drop['POSTED'] = pd.to_datetime(data['POSTED'], errors='coerce')\ndata_drop['EXPIRED'] = pd.to_datetime(data['EXPIRED'], errors='coerce')\ndata_drop['LAST_UPDATED_DATE'] = pd.to_datetime(data['LAST_UPDATED_DATE'], errors='coerce')\ndata_drop['MODELED_EXPIRED'] = pd.to_datetime(data_drop['MODELED_EXPIRED'], errors='coerce')\n\ndata_drop['EXPIRED'] = data_drop['EXPIRED'].fillna(pd.to_datetime('2100-12-31'))\ndata_drop['MODELED_EXPIRED'] = data_drop['MODELED_EXPIRED'].fillna(pd.to_datetime('2100-12-31'))\n\n\n#Handle the remaining missing values\nstring_cols = data_drop.select_dtypes(include='object').columns\ndata_drop[string_cols] = data_drop[string_cols].fillna(\"Unknown\")\n\nnumeric_cols = data_drop.select_dtypes(include=['float64', 'int64']).columns\ndata_drop[numeric_cols] = data_drop[numeric_cols].fillna(0)\n\n\n#Remove Duplicates\ndata_cleaned = data_drop.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\")\n\n\ndata_cleaned[data_cleaned.isna().any(axis=1)]\ndata_cleaned = data_cleaned.drop(index=478)\n\n\ndata_cleaned.isna().sum()\n\nLAST_UPDATED_DATE          0\nPOSTED                     0\nEXPIRED                    0\nDURATION                   0\nSOURCE_TYPES               0\n                          ..\nLOT_V6_CAREER_AREA_NAME    0\nLIGHTCAST_SECTORS          0\nLIGHTCAST_SECTORS_NAME     0\nNAICS_2022_6               0\nNAICS_2022_6_NAME          0\nLength: 99, dtype: int64\n\n\n\n\n2 Data Visualization\n\n\n\n\nThe bar plot is used to display the top 10 highest number of job posting industries. \nThe graph shows that computer related services are standing out, management services and employment placement agencies also have double the amount of job postings than others in this category.\n\n\n\n\n\n\nThe box plot presents the salary distribution across the top 10 industries with the highest number of job postings. \nBy reducing the number of categories and adjusting the axis labels, we improve readability.\n\n\n\n\n\n\nThe pie chart represents the distribution of remote, on-site, and hybrid job postings. \nIt helps visualize the proportion of different work arrangements in the job market."
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skill Gap Analysis",
    "section": "",
    "text": "skills_data = {\n    \"Name\": [\"Yixuan\", \"Arohit\", \"Chengjie\"],\n    \"Python\": [5, 3, 4],\n    \"SQL\": [4, 2, 5],\n    \"Machine Learning\": [3, 1, 4],\n    \"Cloud Computing\": [2, 2, 3],\n    \"Data Visualization\": [4, 3, 5],\n    \"Statistics\": [5, 2, 4],\n    \"Project Management\": [3, 4, 3],\n    \"Communication\": [2, 5, 4],\n    \"Problem-Solving\": [4, 4, 5],\n    \"Teamwork\": [5, 5, 5],\n    \"Excel\" :[4, 4, 4],\n    \"Adaptability\": [4, 5, 3],\n    \"Data Analysis\": [4, 3, 4],\n    \"Leadership\": [3, 4, 2],\n    \"R\": [3, 5, 4]\n\n}\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\nData Visualization\nStatistics\nProject Management\nCommunication\nProblem-Solving\nTeamwork\nExcel\nAdaptability\nData Analysis\nLeadership\nR\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYixuan\n5\n4\n3\n2\n4\n5\n3\n2\n4\n5\n4\n4\n4\n3\n3\n\n\nArohit\n3\n2\n1\n2\n3\n2\n4\n5\n4\n5\n4\n5\n3\n4\n5\n\n\nChengjie\n4\n5\n4\n3\n5\n4\n3\n4\n5\n5\n4\n3\n4\n2\n4\n\n\n\n\n\n\n\n\n\n\nskill_keywords = [\n    \"Python\", \"R\", \"SQL\", \"Data Analysis\", \"Machine Learning\",\n    \"Statistics\", \"Data Visualization\", \"Excel\", \"Tableau\", \"Power BI\",\n    \"Java\", \"C++\", \"JavaScript\", \"HTML/CSS\", \"Cloud Computing\",\n    \"Cybersecurity\", \"Network Administration\", \"Database Management\",\n    \"Communication\", \"Problem-Solving\", \"Teamwork\", \"Project Management\",\n    \"Leadership\", \"Time Management\", \"Adaptability\", \"Financial Analysis\",\n    \"Marketing Strategy\", \"Customer Relationship Management\", \"Supply Chain Management\",\n    \"Regulatory Compliance\"\n]\n\n\ndef extract_skills(body_text):\n    if pd.isna(body_text) or not body_text:\n        return []\n    body_text = body_text.lower()\n    # Extract skills present in the text\n    skills = [skill for skill in skill_keywords if skill.lower() in body_text]\n    return skills\n\n\ndata['extracted_skills'] = data['BODY'].apply(extract_skills)\n\n\nall_skills = set()\nfor skills in data['extracted_skills']:\n    all_skills.update(skills)\nprint(all_skills)\n\n{'Python', 'Data Visualization', 'R', 'Regulatory Compliance', 'Excel', 'Java', 'Supply Chain Management', 'Financial Analysis', 'Leadership', 'Cybersecurity', 'C++', 'Problem-Solving', 'Time Management', 'SQL', 'Data Analysis', 'Adaptability', 'Power BI', 'Statistics', 'Communication', 'Marketing Strategy', 'Customer Relationship Management', 'Project Management', 'HTML/CSS', 'Teamwork', 'Machine Learning', 'Network Administration', 'Cloud Computing', 'JavaScript', 'Tableau', 'Database Management'}\n\n\n\nfor skill in all_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0  \n\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\nData Visualization\nStatistics\nProject Management\nCommunication\nProblem-Solving\nTeamwork\n...\nC++\nTime Management\nPower BI\nMarketing Strategy\nCustomer Relationship Management\nHTML/CSS\nNetwork Administration\nJavaScript\nTableau\nDatabase Management\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYixuan\n5\n4\n3\n2\n4\n5\n3\n2\n4\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nArohit\n3\n2\n1\n2\n3\n2\n4\n5\n4\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nChengjie\n4\n5\n4\n3\n5\n4\n3\n4\n5\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n3 rows × 30 columns"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "1 Top 10 Job Postings by Industry\n\n\n\n\n2 Salary Distribution by Industry\n\n\n\n\n3 Remote vs. On-Site Jobs\n\n\n\n\n4 Team Skill Levels Heatmap"
  }
]