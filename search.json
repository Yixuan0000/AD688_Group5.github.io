[
  {
    "objectID": "ml_methods.html",
    "href": "ml_methods.html",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "",
    "text": "LAST_UPDATED_DATE\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nACTIVE_SOURCES_INFO\nTITLE_RAW\nBODY\nMODELED_EXPIRED\n...\nLOT_V6_OCCUPATION\nLOT_V6_OCCUPATION_NAME\nLOT_V6_OCCUPATION_GROUP\nLOT_V6_OCCUPATION_GROUP_NAME\nLOT_V6_CAREER_AREA\nLOT_V6_CAREER_AREA_NAME\nLIGHTCAST_SECTORS\nLIGHTCAST_SECTORS_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n2024-09-06\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\nUnknown\nEnterprise Analyst (II-III)\n31-May-2024\\n\\nEnterprise Analyst (II-III)\\n\\n...\n2024-06-08\n...\n231010.0\nBusiness Intelligence Analyst\n2310.0\nBusiness Intelligence\n23.0\nInformation Technology and Computer Science\n[\\n 7\\n]\n[\\n \"Artificial Intelligence\"\\n]\n441330.0\nAutomotive Parts and Accessories Retailers\n\n\n1\n2024-08-02\n2024-06-02\n2024-08-01\n-1.0\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\nUnknown\nOracle Consultant - Reports (3592)\nOracle Consultant - Reports (3592)\\n\\nat SMX i...\n2024-08-01\n...\n231010.0\nBusiness Intelligence Analyst\n2310.0\nBusiness Intelligence\n23.0\nInformation Technology and Computer Science\nUnknown\nUnknown\n561320.0\nTemporary Help Services\n\n\n2\n2024-09-06\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\nUnknown\nData Analyst\nTaking care of people is at the heart of every...\n2024-06-10\n...\n231113.0\nData / Data Mining Analyst\n2311.0\nData Analysis and Mathematics\n23.0\nInformation Technology and Computer Science\nUnknown\nUnknown\n524291.0\nClaims Adjusting\n\n\n3\n2024-09-06\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\nUnknown\nSr. Lead Data Mgmt. Analyst - SAS Product Owner\nAbout this role:\\n\\nWells Fargo is looking for...\n2024-06-12\n...\n231113.0\nData / Data Mining Analyst\n2311.0\nData Analysis and Mathematics\n23.0\nInformation Technology and Computer Science\n[\\n 6\\n]\n[\\n \"Data Privacy/Protection\"\\n]\n522110.0\nCommercial Banking\n\n\n4\n2024-06-19\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\nUnknown\nComisiones de $1000 - $3000 por semana... Comi...\nComisiones de $1000 - $3000 por semana... Comi...\n2024-06-17\n...\n231010.0\nBusiness Intelligence Analyst\n2310.0\nBusiness Intelligence\n23.0\nInformation Technology and Computer Science\nUnknown\nUnknown\n999999.0\nUnclassified Industry\n\n\n\n\n5 rows × 99 columns\n\n\n\n\nna_values = [\"Unknown\", \"[None]\", \"\", \"None\", \"unknown\"]\ndf = df.replace(na_values, np.nan)\n\n\ndf[\"exp_mid\"] = df[[\"MIN_YEARS_EXPERIENCE\", \"MAX_YEARS_EXPERIENCE\"]].mean(axis=1)\n\ndf[\"skill_count\"] = df[\"SPECIALIZED_SKILLS_NAME\"].fillna(\"\").str.count(\",\") + 1\n\ndf[\"has_python\"] = df[\"SPECIALIZED_SKILLS_NAME\"].str.contains(\"Python\", case=False, na=False).astype(int)\n\ndf[\"edu_ge_bachelors\"] = df[\"MIN_EDULEVELS_NAME\"].isin(\n    [\"Bachelor's Degree\", \"Master's Degree\", \"Doctoral Degree\"]\n).astype(int)\n\nkeep_num  = [\"exp_mid\", \"MODELED_DURATION\", \"skill_count\",\n             \"has_python\", \"edu_ge_bachelors\"]\n\nkeep_cat  = [\"EMPLOYMENT_TYPE_NAME\", \"REMOTE_TYPE_NAME\",\n             \"STATE_NAME\", \n             \"SOC_2021_4_NAME\"]\n\ndf_model = (\n    df.dropna(subset=[\"SALARY\"])      \n      .loc[:, keep_num + keep_cat + [\"SALARY\"]]  \n)\n\n\n\n\ndf_dummies = pd.get_dummies(\n    df_model,\n    columns = keep_cat,   \n    drop_first = True,   \n    dtype = float        \n)\n\n\n\n(69197, 60)\nexp_mid                                          float64\nMODELED_DURATION                                 float64\nskill_count                                        int64\nhas_python                                         int64\nedu_ge_bachelors                                   int64\nSALARY                                           float64\nEMPLOYMENT_TYPE_NAME_Part-time (â‰¤ 32 hours)    float64\nEMPLOYMENT_TYPE_NAME_Part-time / full-time       float64\nREMOTE_TYPE_NAME_Not Remote                      float64\nREMOTE_TYPE_NAME_Remote                          float64\ndtype: object\n\n\n\n# Drop salary to form features\nX = df_dummies.drop('SALARY', axis = 1)\ny = df_dummies['SALARY']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y ,test_size = 0.3, random_state = 688)\n\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\n\ny_pred = model.predict(X_test)\npd.Series(y_pred).describe()\n\ncount     20760.000000\nmean     116665.029362\nstd        8791.894940\nmin       88800.236917\n25%      109974.963777\n50%      115505.306864\n75%      122329.751484\nmax      162401.095589\ndtype: float64\n\n\n\nrmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"RMSE: {rmse:.2f}\")\nprint(f\"R-squared: {r2:.4f}\")\n\nRMSE: 806814997.70\nR-squared: 0.0829\n\n\n\ncoef_df = pd.DataFrame({\n    \"Feature\": X.columns,\n    \"Coefficient\": model.coef_\n}).sort_values(by=\"Coefficient\", ascending=False)\n\ncoef_df.head(10)\n\n\n\n\n\n\n\n\nFeature\nCoefficient\n\n\n\n\n12\nSTATE_NAME_California\n5190.928636\n\n\n52\nSTATE_NAME_Vermont\n4496.118897\n\n\n54\nSTATE_NAME_Washington\n4472.008952\n\n\n14\nSTATE_NAME_Connecticut\n4331.075349\n\n\n0\nexp_mid\n3285.573906\n\n\n37\nSTATE_NAME_New Jersey\n2969.753458\n\n\n20\nSTATE_NAME_Illinois\n2593.946072\n\n\n11\nSTATE_NAME_Arkansas\n2567.848230\n\n\n53\nSTATE_NAME_Virginia\n2547.821596\n\n\n15\nSTATE_NAME_Delaware\n2302.284166\n\n\n\n\n\n\n\n\ncoef_cleaned = coef_df[~coef_df[\"Feature\"].str.contains(\n    r\"Unknown|\\[None\\]\",  \n    na=False              \n)]\n\ncoef_cleaned.head(10)\n\n\n\n\n\n\n\n\nFeature\nCoefficient\n\n\n\n\n12\nSTATE_NAME_California\n5190.928636\n\n\n52\nSTATE_NAME_Vermont\n4496.118897\n\n\n54\nSTATE_NAME_Washington\n4472.008952\n\n\n14\nSTATE_NAME_Connecticut\n4331.075349\n\n\n0\nexp_mid\n3285.573906\n\n\n37\nSTATE_NAME_New Jersey\n2969.753458\n\n\n20\nSTATE_NAME_Illinois\n2593.946072\n\n\n11\nSTATE_NAME_Arkansas\n2567.848230\n\n\n53\nSTATE_NAME_Virginia\n2547.821596\n\n\n15\nSTATE_NAME_Delaware\n2302.284166"
  },
  {
    "objectID": "ml_methods.html#feature-engineering",
    "href": "ml_methods.html#feature-engineering",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "",
    "text": "df_dummies = pd.get_dummies(\n    df_model,\n    columns = keep_cat,   \n    drop_first = True,   \n    dtype = float        \n)\n\n\n\n(69197, 60)\nexp_mid                                          float64\nMODELED_DURATION                                 float64\nskill_count                                        int64\nhas_python                                         int64\nedu_ge_bachelors                                   int64\nSALARY                                           float64\nEMPLOYMENT_TYPE_NAME_Part-time (â‰¤ 32 hours)    float64\nEMPLOYMENT_TYPE_NAME_Part-time / full-time       float64\nREMOTE_TYPE_NAME_Not Remote                      float64\nREMOTE_TYPE_NAME_Remote                          float64\ndtype: object\n\n\n\n# Drop salary to form features\nX = df_dummies.drop('SALARY', axis = 1)\ny = df_dummies['SALARY']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y ,test_size = 0.3, random_state = 688)\n\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\n\ny_pred = model.predict(X_test)\npd.Series(y_pred).describe()\n\ncount     20760.000000\nmean     116665.029362\nstd        8791.894940\nmin       88800.236917\n25%      109974.963777\n50%      115505.306864\n75%      122329.751484\nmax      162401.095589\ndtype: float64\n\n\n\nrmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"RMSE: {rmse:.2f}\")\nprint(f\"R-squared: {r2:.4f}\")\n\nRMSE: 806814997.70\nR-squared: 0.0829\n\n\n\ncoef_df = pd.DataFrame({\n    \"Feature\": X.columns,\n    \"Coefficient\": model.coef_\n}).sort_values(by=\"Coefficient\", ascending=False)\n\ncoef_df.head(10)\n\n\n\n\n\n\n\n\nFeature\nCoefficient\n\n\n\n\n12\nSTATE_NAME_California\n5190.928636\n\n\n52\nSTATE_NAME_Vermont\n4496.118897\n\n\n54\nSTATE_NAME_Washington\n4472.008952\n\n\n14\nSTATE_NAME_Connecticut\n4331.075349\n\n\n0\nexp_mid\n3285.573906\n\n\n37\nSTATE_NAME_New Jersey\n2969.753458\n\n\n20\nSTATE_NAME_Illinois\n2593.946072\n\n\n11\nSTATE_NAME_Arkansas\n2567.848230\n\n\n53\nSTATE_NAME_Virginia\n2547.821596\n\n\n15\nSTATE_NAME_Delaware\n2302.284166\n\n\n\n\n\n\n\n\ncoef_cleaned = coef_df[~coef_df[\"Feature\"].str.contains(\n    r\"Unknown|\\[None\\]\",  \n    na=False              \n)]\n\ncoef_cleaned.head(10)\n\n\n\n\n\n\n\n\nFeature\nCoefficient\n\n\n\n\n12\nSTATE_NAME_California\n5190.928636\n\n\n52\nSTATE_NAME_Vermont\n4496.118897\n\n\n54\nSTATE_NAME_Washington\n4472.008952\n\n\n14\nSTATE_NAME_Connecticut\n4331.075349\n\n\n0\nexp_mid\n3285.573906\n\n\n37\nSTATE_NAME_New Jersey\n2969.753458\n\n\n20\nSTATE_NAME_Illinois\n2593.946072\n\n\n11\nSTATE_NAME_Arkansas\n2567.848230\n\n\n53\nSTATE_NAME_Virginia\n2547.821596\n\n\n15\nSTATE_NAME_Delaware\n2302.284166"
  },
  {
    "objectID": "ml_methods.html#coefficient-bar-chart",
    "href": "ml_methods.html#coefficient-bar-chart",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "2.1 Coefficient bar chart",
    "text": "2.1 Coefficient bar chart"
  },
  {
    "objectID": "ml_methods.html#actual-vs.-predicted",
    "href": "ml_methods.html#actual-vs.-predicted",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "2.2 Actual vs. Predicted",
    "text": "2.2 Actual vs. Predicted"
  },
  {
    "objectID": "ml_methods.html#residual-histogram",
    "href": "ml_methods.html#residual-histogram",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "2.3 Residual histogram",
    "text": "2.3 Residual histogram"
  },
  {
    "objectID": "ml_methods.html#rank-importance",
    "href": "ml_methods.html#rank-importance",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "3.1 Rank Importance",
    "text": "3.1 Rank Importance"
  },
  {
    "objectID": "ml_methods.html#elbow-plot",
    "href": "ml_methods.html#elbow-plot",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "4.1 Elbow Plot",
    "text": "4.1 Elbow Plot"
  },
  {
    "objectID": "ml_methods.html#silhouette-score",
    "href": "ml_methods.html#silhouette-score",
    "title": "Multiple Linear Regression - Salary Predition",
    "section": "4.2 Silhouette Score",
    "text": "4.2 Silhouette Score"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "1 Top 10 Job Postings by Industry\n\n\n\n\n2 Salary Distribution by Industry\n\n\n\n\n3 Remote vs. On-Site Jobs\n\n\n\n\n4 Team Skill Levels Heatmap"
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skill Gap Analysis",
    "section": "",
    "text": "skills_data = {\n    \"Name\": [\"Yixuan\", \"Arohit\", \"Chengjie\"],\n    \"Python\": [5, 3, 4],\n    \"SQL\": [4, 2, 5],\n    \"Machine Learning\": [3, 1, 4],\n    \"Cloud Computing\": [2, 2, 3],\n    \"Data Visualization\": [4, 3, 5],\n    \"Statistics\": [5, 2, 4],\n    \"Project Management\": [3, 4, 3],\n    \"Communication\": [2, 5, 4],\n    \"Problem-Solving\": [4, 4, 5],\n    \"Teamwork\": [5, 5, 5],\n    \"Excel\" :[4, 4, 4],\n    \"Adaptability\": [4, 5, 3],\n    \"Data Analysis\": [4, 3, 4],\n    \"Leadership\": [3, 4, 2],\n    \"R\": [3, 5, 4]\n\n}\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\nData Visualization\nStatistics\nProject Management\nCommunication\nProblem-Solving\nTeamwork\nExcel\nAdaptability\nData Analysis\nLeadership\nR\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYixuan\n5\n4\n3\n2\n4\n5\n3\n2\n4\n5\n4\n4\n4\n3\n3\n\n\nArohit\n3\n2\n1\n2\n3\n2\n4\n5\n4\n5\n4\n5\n3\n4\n5\n\n\nChengjie\n4\n5\n4\n3\n5\n4\n3\n4\n5\n5\n4\n3\n4\n2\n4\n\n\n\n\n\n\n\n\n\n\nskill_keywords = [\n    \"Python\", \"R\", \"SQL\", \"Data Analysis\", \"Machine Learning\",\n    \"Statistics\", \"Data Visualization\", \"Excel\", \"Tableau\", \"Power BI\",\n    \"Java\", \"C++\", \"JavaScript\", \"HTML/CSS\", \"Cloud Computing\",\n    \"Cybersecurity\", \"Network Administration\", \"Database Management\",\n    \"Communication\", \"Problem-Solving\", \"Teamwork\", \"Project Management\",\n    \"Leadership\", \"Time Management\", \"Adaptability\", \"Financial Analysis\",\n    \"Marketing Strategy\", \"Customer Relationship Management\", \"Supply Chain Management\",\n    \"Regulatory Compliance\"\n]\n\n\ndef extract_skills(body_text):\n    if pd.isna(body_text) or not body_text:\n        return []\n    body_text = body_text.lower()\n    # Extract skills present in the text\n    skills = [skill for skill in skill_keywords if skill.lower() in body_text]\n    return skills\n\n\ndata['extracted_skills'] = data['BODY'].apply(extract_skills)\n\n\nall_skills = set()\nfor skills in data['extracted_skills']:\n    all_skills.update(skills)\nprint(all_skills)\n\n{'Machine Learning', 'Tableau', 'SQL', 'Data Analysis', 'Problem-Solving', 'Time Management', 'Excel', 'Python', 'Cybersecurity', 'Leadership', 'Communication', 'Financial Analysis', 'C++', 'Statistics', 'Regulatory Compliance', 'Data Visualization', 'Power BI', 'HTML/CSS', 'Supply Chain Management', 'JavaScript', 'Teamwork', 'Network Administration', 'Marketing Strategy', 'Project Management', 'R', 'Adaptability', 'Customer Relationship Management', 'Java', 'Database Management', 'Cloud Computing'}\n\n\n\nfor skill in all_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0  \n\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\nData Visualization\nStatistics\nProject Management\nCommunication\nProblem-Solving\nTeamwork\n...\nRegulatory Compliance\nPower BI\nHTML/CSS\nSupply Chain Management\nJavaScript\nNetwork Administration\nMarketing Strategy\nCustomer Relationship Management\nJava\nDatabase Management\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYixuan\n5\n4\n3\n2\n4\n5\n3\n2\n4\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nArohit\n3\n2\n1\n2\n3\n2\n4\n5\n4\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nChengjie\n4\n5\n4\n3\n5\n4\n3\n4\n5\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n3 rows × 30 columns"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AD688_Group5.github.io",
    "section": "",
    "text": "This is a Quarto website.\n\nGroup Project 1\nYixuan Yang, Arohit Talari, Chengjie Lu"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Analysis",
    "section": "",
    "text": "1 Data Preparation and Cleaning\n\n\n/var/folders/8c/3l15xlrn78x5217gdqdbbnc00000gn/T/ipykernel_78470/3367646316.py:1: DtypeWarning:\n\nColumns (19,30) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\ncolumns_to_drop = [\n   \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_2_NAME\", \"SOC_3\", \"SOC_3_NAME\", \"SOC_4\", \"SOC_4_NAME\", \"SOC_5\", \"SOC_5_NAME\", \"SOC_2021_2\", \"SOC_2021_2_NAME\", \"SOC_2021_3\", \"SOC_2021_3_NAME\", \"SOC_2021_5\", \"SOC_2021_5_NAME\",\n    'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME','NAICS_2022_5', 'NAICS_2022_5_NAME', 'SOC_2_NAME', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5_NAME'\n]\ndata_drop = data.drop(columns=columns_to_drop)\n\n\n#Replace salary with median\nsalary_median = data_drop['SALARY'].median()\nsalary_to_median = data_drop['SALARY_TO'].median()\nsalary_from_median = data_drop['SALARY_FROM'].median()\ndata_drop['SALARY'] = data_drop['SALARY'].fillna(salary_median)\ndata_drop['SALARY_TO'] = data_drop['SALARY_TO'].fillna(salary_to_median)\ndata_drop['SALARY_FROM'] = data_drop['SALARY_FROM'].fillna(salary_from_median)\n\n\n#Replace NA Values with 0 and -1\ndata_drop['MIN_YEARS_EXPERIENCE'] = data_drop['MIN_YEARS_EXPERIENCE'].fillna(0)\ndata_drop['DURATION'] = data_drop['DURATION'].fillna(-1)\ndata_drop['MODELED_DURATION'] = data_drop['MODELED_DURATION'].fillna(-1)\n\n\n#Replace Missing Dates with Reasonable Values, and convert to date time format\ndata_drop['POSTED'] = pd.to_datetime(data['POSTED'], errors='coerce')\ndata_drop['EXPIRED'] = pd.to_datetime(data['EXPIRED'], errors='coerce')\ndata_drop['LAST_UPDATED_DATE'] = pd.to_datetime(data['LAST_UPDATED_DATE'], errors='coerce')\ndata_drop['MODELED_EXPIRED'] = pd.to_datetime(data_drop['MODELED_EXPIRED'], errors='coerce')\n\ndata_drop['EXPIRED'] = data_drop['EXPIRED'].fillna(pd.to_datetime('2100-12-31'))\ndata_drop['MODELED_EXPIRED'] = data_drop['MODELED_EXPIRED'].fillna(pd.to_datetime('2100-12-31'))\n\n\n#Handle the remaining missing values\nstring_cols = data_drop.select_dtypes(include='object').columns\ndata_drop[string_cols] = data_drop[string_cols].fillna(\"Unknown\")\n\nnumeric_cols = data_drop.select_dtypes(include=['float64', 'int64']).columns\ndata_drop[numeric_cols] = data_drop[numeric_cols].fillna(0)\n\n\n#Remove Duplicates\ndata_cleaned = data_drop.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\")\n\n\ndata_cleaned[data_cleaned.isna().any(axis=1)]\ndata_cleaned = data_cleaned.drop(index=478)\n\n\ndata_cleaned.isna().sum()\n\nLAST_UPDATED_DATE          0\nPOSTED                     0\nEXPIRED                    0\nDURATION                   0\nSOURCE_TYPES               0\n                          ..\nLOT_V6_CAREER_AREA_NAME    0\nLIGHTCAST_SECTORS          0\nLIGHTCAST_SECTORS_NAME     0\nNAICS_2022_6               0\nNAICS_2022_6_NAME          0\nLength: 99, dtype: int64\n\n\n\n\n2 Data Visualization\n\n\n\n\nThe bar plot is used to display the top 10 highest number of job posting industries. \nThe graph shows that computer related services are standing out, management services and employment placement agencies also have double the amount of job postings than others in this category.\n\n\n\n\n\n\nThe box plot presents the salary distribution across the top 10 industries with the highest number of job postings. \nBy reducing the number of categories and adjusting the axis labels, we improve readability.\n\n\n\n\n\n\nThe pie chart represents the distribution of remote, on-site, and hybrid job postings. \nIt helps visualize the proportion of different work arrangements in the job market."
  }
]